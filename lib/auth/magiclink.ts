import {
  IRequestConfig,
  request,
  DeliveryMethod,
  User,
  HttpResponse,
  HTTPMethods,
  Token,
} from '../shared'

export interface IMagicLink {
  /**
   * Use to create a new user based on the given identifier either email or a phone.
   * choose the selected delivery method for verification.
   * optional to add user metadata for farther user details such as name and more.
   * @param method - The delivery method to be used in the authnetication flow
   * @param identifier - The unique identifier used to sign in or identify this specific user
   * @param URI - the url to return to when verifying the magic link token
   * @param user - an optional user object describing the user metadata
   * @returns throws an error upon failure.
   */
  signUp: (
    method: DeliveryMethod,
    identifier: string,
    URL: string,
    user?: User,
  ) => Promise<HttpResponse<void>>
  /**
   * Use to login a user based on the given identifier
   * and choose the selected delivery method for verification.
   * @param method - The delivery method to be used in the authnetication flow
   * @param identifier - The unique identifier used to sign in or identify this specific user
   * @returns throws an error upon failure.
   */
  signIn: (method: DeliveryMethod, identifier: string, URL: string) => Promise<HttpResponse<void>>
  /**
   * Use to create a new user based on the given identifier either email or a phone.
   * choose the selected delivery method for verification.
   * optional to add user metadata for farther user details such as name and more.
   * This will allow cross device verification meaning you can authenticate using a different device
   * and keep the session in the original device.
   * @param method - The delivery method to be used in the authnetication flow
   * @param identifier - The unique identifier used to sign in or identify this specific user
   * @param URI - the url to return to when verifying the magic link token
   * @param user - an optional user object describing the user metadata
   * @returns throws an error upon failure.
   */
  signUpCrossDevice: (
    method: DeliveryMethod,
    identifier: string,
    URL: string,
    user?: User,
  ) => Promise<HttpResponse<void>>
  /**
   * Use to login a user based on the given identifier
   * and choose the selected delivery method for verification.
   * This will allow cross device verification meaning you can authenticate using a different device
   * @param method - The delivery method to be used in the authnetication flow
   * @param identifier - The unique identifier used to sign in or identify this specific user
   * @param URI - the url to return to when verifying the magic link token
   * @returns throws an error upon failure.
   */
  signInCrossDevice: (
    method: DeliveryMethod,
    identifier: string,
    URL: string,
  ) => Promise<HttpResponse<void>>
  /**
   * Use to verify a signIn/signUp magic links based on the given identifier
   * followed by a token generated by the magic link, used to verify and authenticate the user.
   * @param method - The delivery method to be used in the authnetication flow
   * @param identifier - The unique identifier used to sign in or identify this specific user
   * @param token - token generated by the magic link to authenticate the user
   * @returns a Token object describing the granted token including the user authentication JWT. throws an error upon failure.
   */
  verify: (
    method: DeliveryMethod,
    identifier: string,
    token: string,
  ) => Promise<HttpResponse<Token>>
  // GetPendingSession - Use to get a session that was generated by SignInMagicLink/SignUpMagicLink request, and verified with VerifyMagicLink request.
  /**
   * Use to get a session that was generated by SignInMagicLink/SignUpMagicLink request, and verified with VerifyMagicLink request.
   * @param referenceID - a session reference id to check if
   * @returns a Token object describing the granted token including the user authentication JWT. throws an error upon failure.
   */
  getSession: (referenceID: string) => Promise<HttpResponse<Token | undefined>>
}

export class MagicLink implements IMagicLink {
  private requestConfig: IRequestConfig

  constructor(requestConfig: IRequestConfig) {
    this.requestConfig = requestConfig
  }

  signUp(
    method: DeliveryMethod,
    identifier: string,
    URI: string,
    user?: User,
  ): Promise<HttpResponse<void>> {
    return request(this.requestConfig, {
      method: HTTPMethods.post,
      url: `auth/signup/magiclink/${method}`,
      data: { [method]: identifier, URI, user },
    })
  }

  signIn(method: DeliveryMethod, identifier: string, URI: string): Promise<HttpResponse<void>> {
    return request(this.requestConfig, {
      method: HTTPMethods.post,
      url: `auth/signin/magiclink/${method}`,
      data: { externalID: identifier, URI },
    })
  }

  signUpCrossDevice(
    method: DeliveryMethod,
    identifier: string,
    URI: string,
    user?: User,
  ): Promise<HttpResponse<void>> {
    return request(this.requestConfig, {
      method: HTTPMethods.post,
      url: `auth/signup/magiclink/${method}`,
      data: { [method]: identifier, user, URI, crossDevice: true },
    })
  }

  signInCrossDevice(
    method: DeliveryMethod,
    identifier: string,
    URI: string,
  ): Promise<HttpResponse<void>> {
    return request(this.requestConfig, {
      method: HTTPMethods.post,
      url: `auth/signin/magiclink/${method}`,
      data: { externalID: identifier, URI, crossDevice: true },
    })
  }

  verify(token: string): Promise<HttpResponse<Token>> {
    return request<Token>(this.requestConfig, {
      method: HTTPMethods.post,
      url: `auth/magiclink/verify`,
      data: { token },
    })
  }

  getSession(referenceID: string): Promise<HttpResponse<Token>> {
    return request<Token>(this.requestConfig, {
      method: HTTPMethods.post,
      url: `auth/magiclink/session`,
      data: { pendingRef: referenceID },
    })
  }
}
